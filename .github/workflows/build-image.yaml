name: Build Image

on:
  workflow_run:
    workflows: [ "Release" ]
    types:
      - completed
  workflow_dispatch:
    inputs:
      RELEASE_VERSION:
        required: true
        description: "Version of the release to download artifacts"
        type: string
env:
  RELEASE_INPUT: ${{ inputs.RELEASE_VERSION }}
  REGISTRY_DOMAIN: ${{ vars.REGISTRY_DOMAIN }}
  WORKFLOW_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id}}"
  WORKFLOW_REF: build ${{ github.run_id }} on ${{ github.ref_name }}
  IMAGE_NAME: ${{ vars.IMAGE_NAME }}
jobs:
  build-image:
    name: build image ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [ x86_64-unknown-linux-musl ]
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: download artifact (with release)
        if: github.event_name == 'workflow_run'
        uses: robinraju/release-downloader@v1.10
        with:
          out-file-path: downloads
          tag: ${{ github.event.workflow_run.head_branch }}
          tarBall: true
          zipBall: false
          extract: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: download artifact (with input)
        if: ${{ github.event.inputs.RELEASE_VERSION != '' }}
        uses: robinraju/release-downloader@v1.10
        with:
          out-file-path: downloads
          tag: ${{ github.event.inputs.RELEASE_VERSION }}
          fileName: consul-kv-sync-Linux-x86_64-musl.tar.gz
          tarBall: false
          zipBall: false
          extract: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: check download dir contents
        run: find downloads
      - name: Install depot
        run: |
          curl -L https://depot.dev/install-cli.sh | sudo env DEPOT_INSTALL_DIR=/usr/local/bin sh
      - name: Login to OCIR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_DOMAIN }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and tag image
        id: docker_build
        env:
          DEPOT_TOKEN: ${{ secrets.DEPOT_TOKEN }}
          DEPOT_PROJECT_ID: ${{ vars.DEPOT_PROJECT_ID }}
        run: |
          export TAG_VERSION=${RELEASE_INPUT:-"${{ github.event.workflow_run.head_branch }}"}
          /usr/local/bin/depot build --push --platform linux/amd64 -t ${REGISTRY_DOMAIN}/${IMAGE_NAME}:${TAG_VERSION} .
          echo "::set-output name=tag_version::${TAG_VERSION}"
      - name: Notify image build success
        if: success()
        uses: giovannicandido/notification-action@main
        with:
          api-key: ${{ secrets.ZULIP_API_KEY }}
          topic: "deployments/${{ github.repository }}"
          workflow-url: ${{ env.WORKFLOW_URL }}
          workflow-ref: ${{env.WORKFLOW_REF }}
          tag: ${{ steps.docker_build.outputs.tag_version }}
          content-type: image-success
      - name: Notify deployment failure
        if: failure()
        uses: giovannicandido/notification-action@main
        with:
          api-key: ${{ secrets.ZULIP_API_KEY }}
          topic: "deployments/${{ github.repository }}"
          workflow-url: ${{ env.WORKFLOW_URL }}
          workflow-ref: ${{env.WORKFLOW_REF }}
          tag: ${{ steps.docker_build.outputs.tag_version }}
          content-type: deploy-failure